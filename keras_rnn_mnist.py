# -*- coding: utf-8 -*-
"""keras_RNN_MNIST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16vsFh_UZFGNNCQauRqRPTfPr5cpOeQUx

讀取和顯示Keras資料集中的MNIST資料集
---
顯示前5張訓練資料影像和類別
"""

from keras.datasets import mnist
from matplotlib import pyplot as plt
(x_train, y_train), (x_test, y_test) = mnist.load_data()
print(x_train.shape) 
print(x_test.shape)

# 顯示前5張
for i in range(5):
    plt.imshow(x_train[i])
    plt.title('turth calss={}'.format(y_train[i]))
    plt.show()

"""normalization
---
"""

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

"""類別轉換為one hot
---
"""

import keras
n_classes = 10
y_train_one_hot = keras.utils.to_categorical(y_train, n_classes)
y_test_one_hot = keras.utils.to_categorical(y_test, n_classes)
for i in range(5):
    plt.imshow(x_train[i])
    plt.title('one hot={}'.format(y_train_one_hot[i]))
    plt.show()

"""建立模型(RNN)
---
"""

from keras.layers import SimpleRNN, Dense
time_step = x_train.shape[1]
feature_dim = x_train.shape[2]
input = keras.Input(shape=(time_step, feature_dim))
x = SimpleRNN(128, return_sequences=True)(input)
x = SimpleRNN(128, return_sequences=True)(x)
x = SimpleRNN(64)(x)
output = Dense(10, activation='softmax')(x)
model = keras.Model(input, output)
model.summary()

"""設定優化演算法、損失函數"""

from keras.optimizers import Adam
opt = Adam(lr=1e-3)
model.compile(optimizer=opt,
              loss='categorical_crossentropy',
              metrics=['accuracy'])

"""訓練模型"""

model.fit(x_train, y_train_one_hot,
          batch_size=256,
          epochs=20,
          verbose=1,
          validation_split=0.3)

"""計算測試集的準確度
---
"""

loss, accuracy = model.evaluate(x_test, y_test_one_hot)
print('RNN test dataset loss:', loss)
print('RNN test dataset accuracy:', accuracy)

import numpy as np
for i in range(10):
    img = x_test[i]
    plt.imshow(img)
    img = np.reshape(img, [1,28,28])
    predict = model.predict(img)
    plt.title('truth class={},predict class={}'.format(y_test[i],np.argmax(predict)))
    plt.show()